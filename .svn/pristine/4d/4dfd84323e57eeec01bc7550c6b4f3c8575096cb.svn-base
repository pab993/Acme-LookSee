
package controllers;

import java.util.Date;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import services.OfferService;
import domain.Offer;
import forms.OfferForm;

@Controller
@RequestMapping("/offer")
public class OfferController extends AbstractController {

	//Services
	// ============================================================================

	@Autowired
	private OfferService	offerService;


	//Constructors
	// ============================================================================

	public OfferController() {
		super();
	}

	//Edition
	//=============================================================================

	//	@RequestMapping(value = "/company/edit", method = RequestMethod.GET)
	//	public ModelAndView edit(@RequestParam int offerId) {
	//		ModelAndView result;
	//		Offer offer = offerService.findOne(offerId);
	//		Assert.isTrue(offer.getDraft());
	//	
	//		OfferForm offerForm = reconstructToForm(offer);
	//	
	//		result = createEditModelAndView(offerForm);
	//	
	//		return result;
	//	}

	//Creating
	// ===========================================================================

	@RequestMapping(value = "/company/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;
		OfferForm offerForm = new OfferForm();
		long l = 10;
		Date actual = new Date(System.currentTimeMillis() - l);
		offerForm.setCreateMoment(actual);

		result = createEditModelAndView(offerForm);

		return result;
	}

	//Save
	// =============================================================================

	@RequestMapping(value = "/company/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid final OfferForm offerForm, final BindingResult binding) {
		ModelAndView result;
		Offer offer;

		try {
			offer = offerService.reconstructOffer(offerForm, binding);

			if (binding.hasErrors())
				result = this.createEditModelAndView(offerForm, "offer.save.error");
			else {
				result = new ModelAndView("redirect:/offer/company/list.do");
				offer = this.offerService.save(offer);

			}
		} catch (final Throwable oops) {
			result = this.createEditModelAndView(offerForm, "offer.save.error");
		}

		return result;
	}

	// Ancilliary methods
	// =============================================================================

	private ModelAndView createEditModelAndView(OfferForm offerForm) {

		return createEditModelAndView(offerForm, null);
	}

	private ModelAndView createEditModelAndView(OfferForm offerForm, String message) {

		ModelAndView resul = new ModelAndView("offer/edit");

		resul.addObject("offerForm", offerForm);
		resul.addObject("message", message);
		return resul;
	}
}
